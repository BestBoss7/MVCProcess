# Starter pipeline for Windows to build, test, and deploy your MVC project
# It assumes you are working on the main branch and have already pushed your code to GitHub or Azure Repos.

trigger:
  - main  # Change this to the branch where your code is located

pool:
  vmImage: 'windows-latest'  # Use the latest Windows environment for build

variables:
  BuildConfiguration: 'Release'  # Define the build configuration, default is Release
  ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)  # Default directory to stage your build artifacts

steps:
# Step 1: Checkout the code
- task: Checkout@1
  displayName: 'Checkout Code'

# Step 2: Install .NET SDK (needed for building and testing .NET Core applications)
- script: |
    Invoke-WebRequest -Uri https://aka.ms/install-dotnet.ps1 -OutFile install-dotnet.ps1
    .\install-dotnet.ps1
  displayName: 'Install .NET SDK'

# Step 3: Restore the NuGet packages (needed for the project)
- script: |
    dotnet restore
  displayName: 'Restore NuGet Packages'

# Step 4: Build the project (compiles the application)
- script: |
    dotnet build --configuration $(BuildConfiguration)
  displayName: 'Build Project'

# Step 5: Run Unit Tests (this will run tests if any are present in your project)
- script: |
    dotnet test --configuration $(BuildConfiguration)
  displayName: 'Run Unit Tests'

# Step 6: Publish the project (creates the publish output, can be used for deployment)
- script: |
    dotnet publish --configuration $(BuildConfiguration) --output $(ArtifactStagingDirectory)
  displayName: 'Publish Project'

# Step 7: Optional: Deploy to Azure or other environments (example below, modify for your use case)
# Uncomment this section if you are deploying the build artifacts to Azure Web Apps or other platforms
# - task: AzureWebApp@1
#   inputs:
#     azureSubscription: 'Your Azure Subscription Name'
#     appName: 'Your App Name'
#     package: '$(ArtifactStagingDirectory)/**/*.zip'
#   displayName: 'Deploy to Azure Web App'

# Step 8: Publish artifacts (this step is useful for storing build outputs as artifacts in Azure DevOps)
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifacts'

